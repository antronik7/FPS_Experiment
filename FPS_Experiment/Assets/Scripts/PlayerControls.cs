//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""InputLayout"",
            ""id"": ""c242d410-3635-44eb-83bd-0ce9b90b8327"",
            ""actions"": [
                {
                    ""name"": ""ADS"",
                    ""type"": ""Button"",
                    ""id"": ""6ac5cd67-1fd9-45dd-9750-cc69f4ac19f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e4d40f5-c833-4681-a09b-cd5b4b903c9a"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputLayout
        m_InputLayout = asset.FindActionMap("InputLayout", throwIfNotFound: true);
        m_InputLayout_ADS = m_InputLayout.FindAction("ADS", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputLayout
    private readonly InputActionMap m_InputLayout;
    private List<IInputLayoutActions> m_InputLayoutActionsCallbackInterfaces = new List<IInputLayoutActions>();
    private readonly InputAction m_InputLayout_ADS;
    public struct InputLayoutActions
    {
        private @PlayerControls m_Wrapper;
        public InputLayoutActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ADS => m_Wrapper.m_InputLayout_ADS;
        public InputActionMap Get() { return m_Wrapper.m_InputLayout; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputLayoutActions set) { return set.Get(); }
        public void AddCallbacks(IInputLayoutActions instance)
        {
            if (instance == null || m_Wrapper.m_InputLayoutActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputLayoutActionsCallbackInterfaces.Add(instance);
            @ADS.started += instance.OnADS;
            @ADS.performed += instance.OnADS;
            @ADS.canceled += instance.OnADS;
        }

        private void UnregisterCallbacks(IInputLayoutActions instance)
        {
            @ADS.started -= instance.OnADS;
            @ADS.performed -= instance.OnADS;
            @ADS.canceled -= instance.OnADS;
        }

        public void RemoveCallbacks(IInputLayoutActions instance)
        {
            if (m_Wrapper.m_InputLayoutActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputLayoutActions instance)
        {
            foreach (var item in m_Wrapper.m_InputLayoutActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputLayoutActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputLayoutActions @InputLayout => new InputLayoutActions(this);
    public interface IInputLayoutActions
    {
        void OnADS(InputAction.CallbackContext context);
    }
}
